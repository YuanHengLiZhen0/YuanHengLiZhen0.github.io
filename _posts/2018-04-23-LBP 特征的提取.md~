---
layout:     post
title:     LBP 特征的提取
subtitle:   旋转不变性,光照不变性
date:       2018-04-23
author:    zwht
header-img: img/post-bg-ios9-web.jpg
catalog: true
tags:
    - LBP
    - opencv
    - 算法实现
    
   
---

#  LBP 特征的提取


-------------------

[LBP](#LBP)
[LBP算法实现](#算法实现)
[LBP算法实现](#Extended LBP特征)
[Extends LBP算法实现](#Extended 算法实现)



### LBP
 - 在数字图像处理和模式识别领域一种有效的纹理描述算子，度量和提取图像局部的纹理信息，对`光照具有不变性`。单纯的LBP记录像素点与其周围像素点的对比信息，或说差异。从图1我们看到，最左边的是原图，标号为example。我们要检测某个像素点的某些信息，在图1中，对于9个方格中中间方格（方格中的数字是像素点灰度值大小），做一个阈值化处理。大于等于中心点像素的，则标记为1，小于的则标记为0。最后将中心像素点周围的11110001二进制数化为十进制数，得到LBP值。二进制数11110001的顺序并无硬性要求，只要在同一处理中保持相同的顺序即可。

![Alt text](/img/20180423LBP/1524551354831.png)  <center>图1</center>















#### 算法实现
c++版本
```c++
 template <typename _Tp> static
    void olbp_(InputArray _src, OutputArray _dst) {
      Mat src = _src.getMat();
      _dst.create(src.rows - 2, src.cols - 2, CV_8UC1);
      Mat dst = _dst.getMat();
      dst.setTo(0);
      for (int i = 1; i<src.rows - 1; i++) {
        for (int j = 1; j<src.cols - 1; j++) {
          _Tp center = src.at<_Tp>(i, j);
          unsigned char code = 0;
          code |= (src.at<_Tp>(i - 1, j - 1) >= center) << 7;
          code |= (src.at<_Tp>(i - 1, j) >= center) << 6;
          code |= (src.at<_Tp>(i - 1, j + 1) >= center) << 5;
          code |= (src.at<_Tp>(i, j + 1) >= center) << 4;
          code |= (src.at<_Tp>(i + 1, j + 1) >= center) << 3;
          code |= (src.at<_Tp>(i + 1, j) >= center) << 2;
          code |= (src.at<_Tp>(i + 1, j - 1) >= center) << 1;
          code |= (src.at<_Tp>(i, j - 1) >= center) << 0;
          dst.at<unsigned char>(i - 1, j - 1) = code;
        }
      }

    }
```
java版本
```
 public  static Mat olbp(Mat src) {
        int h=src.rows();
        int w=src.cols();      
        Mat dst=new Mat();     
        dst.create(h - 2, w - 2, CvType.CV_8UC1);   
        dst.setTo(new Scalar(0));  //置0
       byte[] bytes=new byte[h*w];
       byte[] dstbytes=new byte[(h - 2)*(w-2)];
       src.get(0,0,bytes);  //从坐标开始的所有 的像素值 构成的数组
        for (int i = 1; i<h - 1; i++) {
            for (int j = 1; j<w - 1; j++) {
               char center=(char)bytes[i*w+j];
                byte code = 0;
           code |=ret0((char)bytes[(i-1)*w+(j-1)],center)<<7;
           code |= ret0((char)bytes[(i-1)*w+(j)],center)<<6;
           code |= ret0((char)bytes[(i-1)*w+(j+1)],center)<<5;
           code |= ret0((char)bytes[(i)*w+(j+1)],center)<<4;
           code |= ret0((char)bytes[(i+1)*w+(j+1)],center)<<3;
           code |= ret0((char)bytes[(i+1)*w+(j)],center)<<2;
           code |= ret0((char)bytes[(i+1)*w+(j-1)],center)<<1;
           code |= ret0((char)bytes[(i)*w+(j-1)],center)<<0;
                dstbytes[(i-1)*(w-2)+(j-1)]=code;
            }
        }

```
效果图如下:
![Alt text](/img/20180423LBP/1524553590980.png)  &#160;&#160;&#160;&#160;&#160;&#160;&#160;      ![Alt text](/img/20180423/1524553643213.png)



但是这样的LBP描述特征能力有限，且不具备`旋转不变性`。很容易想象，如果图片进行了旋转，则LBP值也会随之改变。




### Extended LBP特征
由于原始LBP特征使用的是固定邻域内的灰度值，因此当图像的尺度发生变化时，LBP特征的编码将会发生错误，LBP特征将不能正确的反映像素点周围的纹理信息，<code>为了适应不同尺度的纹理特征，并达到灰度和旋转不变性的要求</code>，将 3×3 邻域扩展到任意邻域，并用圆形邻域代替了正方形邻域，改进后的 LBP 算子允许在半径为 R 的圆形邻域内有任意多个像素点。从而得到了诸如半径为R的圆形区域内含有P个采样点的LBP算子：

#### Extended 算法实现
**c++实现**
```

        Mat src = _src.getMat();
      
        _dst.create(src.rows-2*radius,src.cols-2*radius,CV_8UC1);
        Mat dst = _dst.getMat();
        dst.setTo(0);
        for(int k=0;k<neighbors;k++)
        {
            /
            float rx = static_cast<float>(radius * cos(2.0 * CV_PI * k / neighbors));
            float ry = -static_cast<float>(radius * sin(2.0 * CV_PI * k / neighbors));
           
            int x1 = static_cast<int>(floor(rx));
            int x2 = static_cast<int>(ceil(rx));
            int y1 = static_cast<int>(floor(ry));
            int y2 = static_cast<int>(ceil(ry));
          
            float tx = rx - x1;
            float ty = ry - y1;
       
            float w1 = (1-tx) * (1-ty);
            float w2 =    tx  * (1-ty);
            float w3 = (1-tx) *    ty;
            float w4 =    tx  *    ty;
          
            for(int i=radius;i<src.rows-radius;i++)
            {
                for(int j=radius;j<src.cols-radius;j++)
                {
                  
                    _Tp center = src.at<_Tp>(i,j);
                    
                    float neighbor = src.at<_Tp>(i+x1,j+y1) * w1 + src.at<_Tp>(i+x1,j+y2) *w2 \
                    + src.at<_Tp>(i+x2,j+y1) * w3 +src.at<_Tp>(i+x2,j+y2) *w4;
                    

                    dst.at<uchar>(i-radius,j-radius) |= (neighbor>center) <<(neighbors-k-1);
                  
                }
                
            }
        }
```

**java实现**
```
 public static  Mat getCircularLBPFeature(Mat src,int radius,int neighbors){
     
        int h=src.rows();
        int w=src.cols();
        Mat dst=new Mat();

       
        dst.create(h-2*radius,w-2*radius,CvType.CV_8UC1);
        dst.setTo(new Scalar(0));
        byte[] dstbytes=new byte[(h - 2*radius)*(w-2*radius)];
        for(int k=0;k<neighbors;k++)
        {
          
            float rx = (float) (radius * Math.cos(2.0 * Math.PI * k / neighbors));
            float ry = (float)(radius * Math.sin(2.0 * Math.PI * k / neighbors));
          
            int x1 = (int)(Math.floor(rx));
            int x2 = (int)(Math.ceil(rx));
            int y1 = (int)(Math.floor(ry));
            int y2 = (int)(Math.ceil(ry));
          
            float tx = rx - x1;
            float ty = ry - y1;
         
            float w1 = (1-tx) * (1-ty);
            float w2 =    tx  * (1-ty);
            float w3 = (1-tx) *    ty;
            float w4 =    tx  *    ty;
          


            byte[] bytes=new byte[h*w];
            src.get(0,0,bytes);  //从坐标开始的所有 的像素值 构成的数组
            for(int i=radius;i<h-radius;i++)
            {
                for(int j=radius;j<w-radius;j++)
                {
               

                    char center=(char)bytes[i*w+j];
                 
                    char neighbor = (char)((char)bytes[(i+x1)*w+j+y1] * w1 +(char) bytes[(i+x1)*w+j+y2] *w2
                    +(char) bytes[(i+x2)*w+j+y1]*w3+  (char)bytes[(i+x2)*w+j+y2] *w4);


                 
                    dstbytes[(i-radius)*(w-2*radius)+(j-radius)] |= ret1(neighbor,center) <<(neighbors-k-1);

                }

            }


        }
        dst.put(0,0,dstbytes);
        return dst;
    }
```

**效果图下**
![Alt text](/img/20180423LBP/1524558804043.png)





