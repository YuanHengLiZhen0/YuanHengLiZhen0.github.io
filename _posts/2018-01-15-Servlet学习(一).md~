---
layout:     post
title:     servlet学习(一)
subtitle:   通过tomcat项目学习servlet
date:       2018-01-15
author:    zwht
header-img: img/post-bg-ios9-web.jpg
catalog: true
tags:
    - servlet 
---

#  Servlet学习(一)


-------------------




##  环境
- tomacat
- intellj idea

## servlet
>servlet是java编写的服务端程序,用来解析和响应web请求,并生成动态web内容.web项目中通常指的是实现了servlet接口的类.

servlet处理web请求流程:

        1,客户端发送请求至服务器端；
        2,服务器将请求信息发送至 Servlet；
        3,Servlet 生成响应内容并将其传给服务器。响应内容动态生成，通常取决于客户端的请求；
        4,服务器将响应返回给客户端。

![Alt text](/img/servlet/servlet1.jpg)

##### 1) servelt接口

![Alt text](/img/servlet/servlet2.png)

(1) init() 方法
&#8195&#8195在 Servlet 的生命期中，`仅执行一次` init() 方法。它是在服务器装入 Servlet 时执行的。无论有多少客户机访问 Servlet，都不会重复执行 init() 。
&#8195&#8195在调用 service() 方法之前，应确保已完成了 init() 方法。

(2) service() 方法
&#8195&#8195service() 方法是 Servlet 的核心。每当一个客户请求一个HttpServlet 对象，该对象的service() 方法就要被调用，而且传递给这个方法一个"请求"(ServletRequest)对象和一个"响应"(ServletResponse)对象作为参数。 在 HttpServlet 中已存在 service() 方法。缺省的服务功能是调用与 HTTP 请求的方法相应的 do 功能。因为 HttpServlet.service() 方法会检查请求方法是否调用了适当的处理方法，不必要覆盖 service() 方法。只需覆盖相应的 do 方法就可以了。
Servlet 的响应可以是下列几种类型：
一个输出流，浏览器根据它的内容类型`contextType`（如 text/html）进行解释。
一个 HTTP 错误响应，重定向`redirect`到另一个 URL、servlet、JSP。

- doGet() 方法
&#8195&#8195当一个客户通过 HTML 表单发出一个 HTTP GET 请求或直接请求一个 URL 时，doGet() 方法被调用。与 GET 请求相关的参数添加到 URL 的后面，并与这个请求一起发送。当不会修改服务器端的数据时，应该使用 doGet() 方法。
- doPost() 方法
&#8195&#8195当一个客户通过 HTML 表单发出一个 HTTP POST 请求时，doPost() 方法被调用。与 POST 请求相关的参数作为一个单独的 HTTP 请求从浏览器发送到服务器。当需要修改服务器端的数据时，应该使用 doPost() 方法。

(3) destroy() 方法
&#8195&#8195destroy() `方法仅执行一次`当服务器卸装 Servlet 时，将在所有 service() 方法调用完成后，或在指定的时间间隔过后调用 destroy() 方法。一个 Servlet 在运行 service() 方法时可能会产生其它的线程，因此请确认在调用 destroy() 方法时，这些线程已终止或完成。
#####  2) 实现servelt接口 
``` java

public class TestServlet extends HttpServlet {
    /*
        接口servlet有servlet生命周期的三个方法,init,service,destroy.其中.init和destroy只执行依次
        service(doget和dopost)每次请求都会执行
    */
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String result = "";
        // 获取用户名和密码
        String userName = request.getParameter("userName");
        String passwd = request.getParameter("password");


        //获得web.xml中servlet配置参数
        ServletConfig config = this.getServletConfig();
        config.getInitParameter("servlet-param");//servlet的初始化参数
        config.getServletName();//servletName


        //获得web.xml中servletcontext
        ServletContext context = getServletContext();
        context.getInitParameter("context-param");

        //获得指定资源的内容
        BufferedReader reader = new BufferedReader(new InputStreamReader(context.getResourceAsStream("/WEB-INF/web.xml"), "UTF-8"));
        reader.lines().filter(a -> a.length() > 40).forEach(System.out::println);



/*        forward和redirect
          forward是同一个请求,网址不变   所以是request分发
          redirect是不同的请求,网址改变  所以是response重新请求
*/
        if (userName.equals("abc") && passwd.equals("123")) {
            request.getSession().setAttribute("userName", userName);
            // response.sendRedirect("login_success.jsp");//重定向可以是本项目路径
            // response.sendRedirect("login_success.jsp");//重定向可以是其他web项目路径   /项目名/路径名
            response.sendRedirect("http://www.baidu.com");//重定向可以是其他网址
        } else {

            request.getSession().setAttribute("userName", userName);
            request.getRequestDispatcher("login_error.jsp").forward(request, response);
        }


    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        doPost(request, response);
    }
}
```
#####  3) web.xml配置
``` xml
    <!--加载顺序:ServletContext -> listener -> filter -> servlet

    -->
    <servlet>
        <servlet-name>TestServlet</servlet-name>
        <servlet-class>TestServlet</servlet-class> <!-- servlet类名-->

        <init-param>
            <param-name>servlet-param</param-name>
            <param-value>servlet初始化参数</param-value>
        </init-param>


        <!--启动时加载该servlet,正数代表加载的优先级,越小优先级越高,负数代表选择时才加载-->
        <load-on-startup>5</load-on-startup>
    </servlet>


    <context-param>
        <param-name>context-param</param-name>
        <param-value>通过context可获得,整个web项目的初始化参数</param-value>
    </context-param>

<!--servlet到路径的映射-->
    <servlet-mapping>
        <servlet-name>TestServlet</servlet-name>
        <url-pattern>*.login</url-pattern>

    </servlet-mapping>


    <!--欢迎页面,可以指定多个,依次查找-->
    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
```
#####  4) ServletConfig，ServletContext，Request，Response
- ServletConfig
在web.xml的配置文件中，可以用一个或多个<init-param>标签为servlet配置一些初始化参数。
开发中ServletConfig的作用有：
```java
  //获取字符集编码：
String charset = this.config.getInitParameter("charset");
  //获得数据库连接信息：
String url = this.config.getInitParameter("url");
String username = this.config.getInitParameter("username");
String password = this.config.getInitParameter("password");
  //获得配置文件：
String configFile = this.config.getInitParameter("config");
```
- ServletContext
WEB容器在启动时，它会为每个WEB应用程序都创建一个对应的ServletContext对象，`它代表当前web应用。`
```java
1）多个web组件之间使用它实现数据共享
  ServletContext context =this.getServletContext(); //servletContext域对象
  context.setAttribute("data","数据"); //向域中存了一个data属性
  ServletContext context =this.getServletContext();
  String value = (String)context.getAttribute("data");  //获取域中的data属性
 

2）通过servletContext对象获取到整个web应用的配置信息

  String url =this.getServletContext().getInitParameter("url");
  String username =this.getServletContext().getInitParameter("username");
  String password =this.getServletContext().getInitParameter("password");

3）通过servletContext对象实现servlet转发
 this.getServletContext().setAttribute("data","serlvet数据转发");
  RequestDispatcher rd =this.getServletContext().getRequestDispatcher("/viewdata.jsp");
  rd.forward(request,response);

4）通过servletContext对象读取资源文件
            BufferedReader reader = new BufferedReader(new InputStreamReader(context.getResourceAsStream("/WEB-INF/web.xml"), "UTF-8"));
        reader.lines().filter(a -> a.length() > 40).forEach(System.out::println);
       
```

### 乱码
　　后台request请求乱码

- get请求：参数在url后面
　  参数通过http协议传输(HTTP协议用ISO-8859-1编码),经过了两次编码，所以就要两次解码
```java
        String userName = request.getParameter("userName");
        String passwd = request.getParameter("password");

        userName=new String(userName.getBytes("ISO-8859-1"),"UTF-8");
```

- post请求：
 ```
               request.setCharacterEncoding("UTF-8");　　
 ```



## Filter
> servlet主要负责处理请求,filter负责拦截请求和放行.
```xml
    <filter>
        <filter-name>TestFilter</filter-name>
        <filter-class>TestFilter</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>TestFilter</filter-name>
        <url-pattern>*.login</url-pattern>
    </filter-mapping>
```
**匹配规则**有三种：

- 精确匹配 —— 如/foo.htm，只会匹配foo.htm这个URL
- 路径匹配 —— 如/foo/*，会匹配以foo为前缀的URL
- 后缀匹配 —— 如*.htm，会匹配所有以.htm为后缀的URL
< url-pattern>的其他写法，如/foo/ ，/.htm ，/foo 都是不对的。




















